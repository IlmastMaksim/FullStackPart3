{"version":3,"sources":["services/persons.js","components/Filter.js","components/Notification.js","components/PersonForm.js","components/Persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","Fragment","type","value","filter","onChange","onChangeFilter","Notification","message","notificationStyle","fontStyle","fontSize","background","borderStyle","borderRadius","padding","marginBottom","mode","color","style","PersonForm","onSubmit","name","onChangeName","number","onChangeNumber","Persons","content","persons","el","toLowerCase","includes","map","i","key","onClick","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","newNotification","setNewNotification","useEffect","personsService","event","target","preventDefault","personsClone","updatablePerson","find","person","retrievedPerson","setTimeout","push","window","confirm","personIndex","findIndex","catch","_","deletablePersonsName","deletablePerson","updatedPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a44c376.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\n\r\nconst Filter = (props) => (\r\n    <React.Fragment>\r\n        filter shown with<input type=\"text\" value={props.filter} onChange={props.onChangeFilter}/>\r\n    </React.Fragment>\r\n)\r\n\r\nexport default Filter","import React from \"react\"\r\n\r\nconst Notification = ({ message }) => {\r\n    let notificationStyle = {\r\n        fontStyle: \"italic\",\r\n        fontSize: 16,\r\n        background: \"lightgrey\",\r\n        borderStyle: \"solid\",\r\n        borderRadius: \"5px\",\r\n        padding: \"10px\",\r\n        marginBottom: \"10px\",\r\n    }\r\n    if (message === null) { return null }\r\n    message.mode === \"success\" ? notificationStyle.color = \"green\" : notificationStyle.color = \"red\"\r\n    return (\r\n      <div style={notificationStyle}>\r\n        {message.message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst PersonForm = (props) => (\r\n    <form onSubmit={props.onSubmit}>\r\n        <div>\r\n          name: <input type=\"text\" value={props.name} onChange={props.onChangeName}/>\r\n        </div>\r\n        <div>\r\n          number: <input type=\"text\" value={props.number} onChange={props.onChangeNumber}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = (props) => {\r\n    const personsToShow = props.filter === \"\" \r\n        ? props.persons \r\n        : props.persons.filter(el => \r\n            el.name.toLowerCase().includes(props.filter.toLowerCase())\r\n        ) \r\n    const content = personsToShow.map((el, i) => <li key={i}>{el.name} {el.number} <button onClick={props.onClick} value={el.name}>delete</button></li>)\r\n    return (\r\n        <ul>\r\n            {content}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Persons","import React, { useState, useEffect } from 'react'\r\nimport personsService from \"./services/persons\"\r\nimport Filter from \"./components/Filter\" \r\nimport Notification from \"./components/Notification\" \r\nimport PersonForm from \"./components/PersonForm\" \r\nimport Persons from \"./components/Persons\"\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ newFilter, setNewFilter ] = useState('')\r\n  const [ newNotification, setNewNotification ] = useState(null)\r\n\r\n  useEffect(() => {\r\n    personsService\r\n      .getAll()\r\n      .then((response) => {\r\n        setPersons(response)\r\n      })\r\n  }, [])\r\n  \r\n  const handleName = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumber = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleFilter = (event) => {\r\n    setNewFilter(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const personsClone = [...persons]\r\n    let updatablePerson = personsClone.find(person => person.name === newName)\r\n    let personAlreadyExists;\r\n    updatablePerson ? personAlreadyExists = true : personAlreadyExists = false\r\n    if (!personAlreadyExists) {\r\n      const newPerson = {name: newName, number: newNumber}\r\n      personsService\r\n        .create(newPerson)\r\n        .then(retrievedPerson => { \r\n          setNewNotification(\r\n            {\r\n              message: `Added ${retrievedPerson.name}`,\r\n              mode: \"success\"\r\n            }\r\n          )\r\n          setTimeout(() => {\r\n            setNewNotification(null)\r\n          }, 5000)\r\n          personsClone.push(retrievedPerson)\r\n          setPersons(personsClone)\r\n        })\r\n    }\r\n    else {\r\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n        updatablePerson.name = newName\r\n        updatablePerson.number = newNumber\r\n        personsService\r\n          .update(updatablePerson.id, updatablePerson)\r\n          .then(retrievedPerson => {\r\n            setNewNotification(\r\n              {\r\n                message: `Updated ${retrievedPerson.name}`,\r\n                mode: \"success\"\r\n              }\r\n            )\r\n            setTimeout(() => {\r\n              setNewNotification(null)\r\n            }, 5000)\r\n            const personIndex = personsClone.findIndex((person => person.id === retrievedPerson.id));\r\n            personsClone[personIndex] = retrievedPerson\r\n            setPersons(personsClone)\r\n          })\r\n          .catch(_ => {\r\n            setNewNotification(\r\n              {\r\n                message: `Information of ${updatablePerson.name} has already been removed from server, please reload the page!`,\r\n                mode: \"error\"\r\n              }\r\n            )\r\n            setTimeout(() => {\r\n              setNewNotification(null)\r\n            }, 5000)\r\n          })\r\n      }\r\n    }\r\n    setNewNumber(\"\")\r\n    setNewName(\"\")\r\n  }\r\n\r\n  const deletePerson = (event) => {\r\n    const personsClone = [...persons]\r\n    const deletablePersonsName = event.target.value\r\n    if (window.confirm(\"Delete \" + deletablePersonsName + \" ?\")) { \r\n      const deletablePerson = personsClone.find(person => person.name === deletablePersonsName)\r\n      personsService\r\n        .remove(deletablePerson.id)\r\n        .then(_ => {\r\n          const updatedPersons = personsClone.filter(person=>person.id !== deletablePerson.id)\r\n          setPersons(updatedPersons)\r\n        })\r\n        .catch(_ => {\r\n          setNewNotification(\r\n            {\r\n              message: `Information of ${deletablePerson.name} has already been removed from server`,\r\n              mode: \"error\"\r\n            }\r\n          )\r\n          setTimeout(() => {\r\n            setNewNotification(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>Phonebook</h2>\r\n        <Notification message={newNotification}/>\r\n        <Filter onChangeFilter={handleFilter} filter={newFilter}/>\r\n      <h3>add a new</h3>\r\n        <PersonForm \r\n          onSubmit={handleSubmit}\r\n          onChangeName={handleName}\r\n          onChangeNumber={handleNumber}\r\n          name={newName}\r\n          number={newNumber} />\r\n      <h3>Numbers</h3>\r\n        <Persons onClick={deletePerson} persons={persons} filter={newFilter}/>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./App\"\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}